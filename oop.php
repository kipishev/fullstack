<?php
/*--------------------------------- ООП */
/* В ООП используются классы. ООП и классы позволяют структурировать код.
Классы хранят внутри себя данные и действия, которые можно выполнить над этими данными.
Функции внутри классов являются методами. Все методы по умолчанию публичны с точки зрения области видимости.
Классы стоит рассматривать как некий чертеж, по которому можно создать что-то реальное (объект) и не один раз.
То, что создается на основе класса называется экземпляром класса или объектом класса. */

/* Есть служебный метод __construct, который никогда не вызывается вручную,
а вызывается всегда автоматически в момент создания экземпляра класса. Данный метод не должен внутри себя
ничего выводить, он должен получить какие-либо данные, обработать их и добавить в свои свойства. Данные
внутри класса называются свойствами. Свойства, как и методы, необходимо заранее описывать.*/

/* После определения свойств, их нужно указать для метода __construct как ожидаемые входящие параметры,
которые будут передаваться при создании экземпляра класса. */

/* При создании каждого экземпляра нашего класса вызывается конструктор, который из передаваемых пользователем
данных заполняет совйства класса, после чего мы можем их использовать внутри наших объявленных методов.
Обращение к свойствам происходит через $this->название метода без знака доллора. */

/* Поскольку все свойства в нашем примере публичные, мы можем их просматривать вне классов и соответственно
переопределять. Поэтому свойства внутри классов редко бывают публичными. */

/* Помимо публичной видимости свойствам можно назначать еще видимость зущищенную (protected) или
приватную (private). Protected - свойства видны внутри классов где они определены и внутри дочерних классов.
Private - свойства видны тольк внутри классов, в которых они определены. */

/* Методы также могут быть публичными, защищенными и приватными.
*/

class Car { // Создание класса
    private $brand; // Определение свойства
    protected $model;
    public $year;

    public function __construct($b, $m, $y) {
        //echo '!<br>'; // Проверка того, что метод отрабатывает автоматически
        $this->brand = $b; // Заполнение параметров
        $this->model = $m;
        $this->year = $y;
    }

    public function drive() {
        echo "$this->brand $this->model ($this->year) driving<br>";
    }
}

$audi = new Car('Audi', 'Q5', 2021); // Создание экземпляра класса (их может быть сколько угодно)
$vesta = new Car('Lada', 'Vesta', 2020);

$vesta->year = 2016; // Можем поменять значение свойства, т. к. в нашем примере оно публичное

$audi->drive(); // Вызов метода из объекта
$vesta->drive();



