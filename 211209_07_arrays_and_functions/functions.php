<?php
/*error_reporting(1);*/
ini_set('display_errors', 1); // или можно указать значение true вместо 1

/* Функция определяется ключевым словом function, дале идет название функции, которое мы самостоятельно
придумываем (как и с переменными, только без знака доллора).
У функции должны быть обязательно круглые скобки, и при описании ее, и при вызове.
Фигурные скобки определяют тело функции. */
function sayHello () {
    echo "Hello<br>"; // мы создали функцию, но ее не вызывали
}

sayHello();
echo 'Hi!<br>';
sayHello();
sayHello();

// Вызов функции происходит путем просто указния ее имени (вызывать функцию можно сколько угодно раз)
/* В отличие от цикла, между функциями мы можем вставлять дополнительных код и снова
вызывать функцию на исполнение */

/*--------------------------------- В функцию можно передавать параметр / аргумент */
function plusOne ($a) {
    echo ++$a . '<br>';
}
plusOne(56);

$number = 18;
plusOne($number);

/*--------------------------------- В функцию можно передавать несколько параметров / аргументов */
function multiply ($a, $b) {
    echo $a * $b . '<br>';
}
multiply(2, 5);

function sumNumbers ($a, $b, $c = 0) { /* Можно задавать необязательные параметры функциям,
 указывая значения по умолчанию (все необязательные параметры должны идти после обязательных) */
    echo $a + $b + $c . '<br>';
}
sumNumbers (1, 2, 3);
sumNumbers (1, 2);

/* Если мы будем, допустим, умножать не числа (не то, что ожидаем), то мы получим ошибку */
/* Чтобы указать, что в качестве аргумента мы ожидаем конкретный тип данных,
нам это нужно явно указать при создании функции */
function multiplyForInt (int $a, int $b) {
    echo $a * $b . '<br>';
}
multiplyForInt(10, 5);

/* Сама по себе функция ничего не должна выводить на экран, в примерах выше мы рассмотри функции с выводом
в качестве быстрого примера отработки фукнции. Как вывести результат работы функции на экран или не
выводить его должен решать потом сам программист.
Для того, чтобы выводить (возвращать) результат работы функции используется специальное слово return.
Возврат результата работы функции происходит внутри функции и потом мы его можем уже использовать
по своему усмотрению */
function returnPlusOne ($a) {
    return ++$a;
}

$number = 9;
returnPlusOne($number); // На данном этапе функция просто пока вернула значение, но нигде его не вывдит
// Чтобы вывести результат работы функции, нам нужно этот результат сначала присвоить
$result = returnPlusOne($number);
// Чтобы вывести результат работы функции, нам нужно вывести то, где этот результат присвоен
echo "Новое число: " . $result = returnPlusOne($number) . "<br>";
// Автор указывает, что вычисления лучше делать вне вывода (для информации)

/* Если функция ничего не возвращает, значит мы получаем NULL */
$res = sumNumbers(1,2);
echo '<br>';
var_dump($res);

/* return возвращает только один пул данных, поэтому чтобы вернуть внем несколько значений,
можно воспользоваться массивами */
echo '<br>';
function returnPlusOneArr ($a) {
    return [ // return прекращает работу функции, встретилось return - дальше код не будет выполняться
        'oldValue' => $a,
        'newValue' => ++$a
    ];
    echo 'lalala'; // данный код уже не отработает, т. к. ранее мы вызвали return
}
$number = 10;
$result = returnPlusOneArr($number);
echo "Старое число: {$result['oldValue']}, новое число: {$result['newValue']} <br>";

/* Задача: найти максимальное значение в массиве.
Решение: принимаем первое значение массива за максимальное значение и сравниваем с ним последующие,
если находим новое максимальное, то присваеваем его результату */
$numbers = [1, 2, 3, 4, 5, 6, 7];
function maxNumber (array $numbers) {
    $max = $numbers[0];
    foreach ($numbers as $number) {
        if ($number > $max) {
            $max = $number;
        }
    }
    return $max;
}
echo maxNumber($numbers) . '<br>';

/* В примере выше мы рассмотрели пример разложения и работы функции. Но для поиска максимальных и
минимальных значений в PHP существуют специальные функци */
echo max($numbers) . '<br>';

/* Если нам нужно посчитать сумму, то нам нужно начинать все время с нуля,
если нужно посчитать произведение, то нам нужно начинать с единицы */
function sumArray (array $numbers) {
    $res = 0;
    foreach ($numbers as $number) {
        // $res = $res + $number;
        $res += $number;
    }
    return $res;
}











